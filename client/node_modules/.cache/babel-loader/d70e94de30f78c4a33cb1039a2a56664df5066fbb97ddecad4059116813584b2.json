{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { toast } from 'react-toastify';\n\n// Async thunk for login\nexport const login = createAsyncThunk('auth/login', async (credentials, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.post('/api/auth/login', credentials, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true\n    });\n    localStorage.setItem('token', response.data.token);\n    return response.data;\n  } catch (err) {\n    var _err$response, _err$response$data;\n    const error = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || err.message;\n    toast.error(error);\n    return rejectWithValue(error);\n  }\n});\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: {\n    token: localStorage.getItem('token'),\n    isLoading: false,\n    error: null\n  },\n  reducers: {\n    logout: state => {\n      localStorage.removeItem('token');\n      state.token = null;\n      state.error = null;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(login.pending, state => {\n      state.isLoading = true;\n      state.error = null;\n    }).addCase(login.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.token = action.payload.token;\n    }).addCase(login.rejected, (state, action) => {\n      var _action$payload;\n      state.isLoading = false;\n      state.error = (_action$payload = action.payload) === null || _action$payload === void 0 ? void 0 : _action$payload.error;\n    });\n  }\n});\n\n// Export the logout action and reducer\nexport const {\n  logout\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","toast","login","credentials","rejectWithValue","response","post","headers","withCredentials","localStorage","setItem","data","token","err","_err$response","_err$response$data","error","message","authSlice","name","initialState","getItem","isLoading","reducers","logout","state","removeItem","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","_action$payload","actions","reducer"],"sources":["C:/Users/divya/url-shortener/client/src/features/auth/authSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\n\r\n// Async thunk for login\r\nexport const login = createAsyncThunk(\r\n  'auth/login',\r\n  async (credentials, { rejectWithValue }) => {\r\n    try {\r\n      const response = await axios.post('/api/auth/login', credentials, {\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        withCredentials: true\r\n      });\r\n      localStorage.setItem('token', response.data.token);\r\n      return response.data;\r\n    } catch (err) {\r\n      const error = err.response?.data?.error || err.message;\r\n      toast.error(error);\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\nconst authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState: {\r\n    token: localStorage.getItem('token'),\r\n    isLoading: false,\r\n    error: null\r\n  },\r\n  reducers: {\r\n    logout: (state) => {\r\n      localStorage.removeItem('token');\r\n      state.token = null;\r\n      state.error = null;\r\n    }\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(login.pending, (state) => {\r\n        state.isLoading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(login.fulfilled, (state, action) => {\r\n        state.isLoading = false;\r\n        state.token = action.payload.token;\r\n      })\r\n      .addCase(login.rejected, (state, action) => {\r\n        state.isLoading = false;\r\n        state.error = action.payload?.error;\r\n      });\r\n  }\r\n});\r\n\r\n// Export the logout action and reducer\r\nexport const { logout } = authSlice.actions;\r\nexport default authSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,gBAAgB;;AAEtC;AACA,OAAO,MAAMC,KAAK,GAAGH,gBAAgB,CACnC,YAAY,EACZ,OAAOI,WAAW,EAAE;EAAEC;AAAgB,CAAC,KAAK;EAC1C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,iBAAiB,EAAEH,WAAW,EAAE;MAChEI,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,eAAe,EAAE;IACnB,CAAC,CAAC;IACFC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACM,IAAI,CAACC,KAAK,CAAC;IAClD,OAAOP,QAAQ,CAACM,IAAI;EACtB,CAAC,CAAC,OAAOE,GAAG,EAAE;IAAA,IAAAC,aAAA,EAAAC,kBAAA;IACZ,MAAMC,KAAK,GAAG,EAAAF,aAAA,GAAAD,GAAG,CAACR,QAAQ,cAAAS,aAAA,wBAAAC,kBAAA,GAAZD,aAAA,CAAcH,IAAI,cAAAI,kBAAA,uBAAlBA,kBAAA,CAAoBC,KAAK,KAAIH,GAAG,CAACI,OAAO;IACtDhB,KAAK,CAACe,KAAK,CAACA,KAAK,CAAC;IAClB,OAAOZ,eAAe,CAACY,KAAK,CAAC;EAC/B;AACF,CACF,CAAC;AAED,MAAME,SAAS,GAAGpB,WAAW,CAAC;EAC5BqB,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACZR,KAAK,EAAEH,YAAY,CAACY,OAAO,CAAC,OAAO,CAAC;IACpCC,SAAS,EAAE,KAAK;IAChBN,KAAK,EAAE;EACT,CAAC;EACDO,QAAQ,EAAE;IACRC,MAAM,EAAGC,KAAK,IAAK;MACjBhB,YAAY,CAACiB,UAAU,CAAC,OAAO,CAAC;MAChCD,KAAK,CAACb,KAAK,GAAG,IAAI;MAClBa,KAAK,CAACT,KAAK,GAAG,IAAI;IACpB;EACF,CAAC;EACDW,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAAC3B,KAAK,CAAC4B,OAAO,EAAGL,KAAK,IAAK;MACjCA,KAAK,CAACH,SAAS,GAAG,IAAI;MACtBG,KAAK,CAACT,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDa,OAAO,CAAC3B,KAAK,CAAC6B,SAAS,EAAE,CAACN,KAAK,EAAEO,MAAM,KAAK;MAC3CP,KAAK,CAACH,SAAS,GAAG,KAAK;MACvBG,KAAK,CAACb,KAAK,GAAGoB,MAAM,CAACC,OAAO,CAACrB,KAAK;IACpC,CAAC,CAAC,CACDiB,OAAO,CAAC3B,KAAK,CAACgC,QAAQ,EAAE,CAACT,KAAK,EAAEO,MAAM,KAAK;MAAA,IAAAG,eAAA;MAC1CV,KAAK,CAACH,SAAS,GAAG,KAAK;MACvBG,KAAK,CAACT,KAAK,IAAAmB,eAAA,GAAGH,MAAM,CAACC,OAAO,cAAAE,eAAA,uBAAdA,eAAA,CAAgBnB,KAAK;IACrC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAEQ;AAAO,CAAC,GAAGN,SAAS,CAACkB,OAAO;AAC3C,eAAelB,SAAS,CAACmB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}